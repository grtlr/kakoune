def -params 1..2 -docstring %{colorscheme <name> [<scope>]:
        enable named colorscheme for a scope (global scope by default)} \
    -shell-candidates %{
    case "$kak_token_to_complete" in
    0)
        find -L "${kak_runtime}/colors" "${kak_config}/colors" -type f -name '*\.kak' \
            | while read -r filename; do
                basename="${filename##*/}"
                printf %s\\n "${basename%.*}"
            done | sort -u
    ;;
    1)
        printf 'buffer\nglobal\nwindow\n'
    ;;
    esac
  } \
  colorscheme %{ evaluate-commands %sh{
    find_colorscheme() {
        find -L "${1}" -type f -name "${2}".kak | head -n 1
    }

    case "$2" in
    buffer|global|window)
        scope="$2"
    ;;
    '')
        scope=global
    ;;
    *)
        echo 'echo -markup "{Error}Invalid scope %arg{2}"'
        exit
    ;;
    esac

    if [ -d "${kak_config}/colors" ]; then
        filename=$(find_colorscheme "${kak_config}/colors" "${1}")
    fi
    if [ -z "${filename}" ]; then
        filename=$(find_colorscheme "${kak_runtime}/colors" "${1}")
    fi

    if [ -n "${filename}" ]; then
        printf 'source %%{%s} %s' "${filename}" "${scope}"
    else
        echo "echo -markup '{Error}No such colorscheme'"
    fi
}}

evaluate-commands %sh{
    autoload_directory() {
        find -L "$1" -type f -name '*\.kak' \
            | sed 's/.*/try %{ source "&" } catch %{ echo -debug Autoload: could not load "&" }/'
    }

    echo "colorscheme default"

    if [ -d "${kak_config}/autoload" ]; then
        autoload_directory ${kak_config}/autoload
    elif [ -d "${kak_runtime}/autoload" ]; then
        autoload_directory ${kak_runtime}/autoload
    fi

    if [ -f "${kak_runtime}/kakrc.local" ]; then
        echo "source '${kak_runtime}/kakrc.local'"
    fi

    if [ -f "${kak_config}/kakrc" ]; then
        echo "source '${kak_config}/kakrc'"
    fi
}
